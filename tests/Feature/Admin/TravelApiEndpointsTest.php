<?php

namespace Tests\Feature\Admin;

use App\Models\Tour;
use App\Models\Travel;
use Database\Seeders\DatabaseSeeder;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class TravelApiEndpointsTest extends TestCase
{
    use RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        (new DatabaseSeeder())->run();

        $token = \App\Models\User::first()->createToken(get_class($this))->plainTextToken;
        $this->withToken($token);
    }

    /** @test */
    public function canReadTravelList(): void
    {
        Travel::factory(25)->create();

        $db_count = Travel::count();
        $response = $this->get(route('secure.travels.index'));

        $response->assertOk();
        $response->assertJsonCount($db_count);
        $response->assertJsonIsArray();
    }

    /** @test */
    public function canCreateTravel(): void
    {
        $payload = Travel::factory()->make();

        $this->assertNull(Travel::find($payload->id)); // not in db

        $response = $this->post(route('secure.travels.store'), $payload->toArray());

        $response->assertCreated();
        $response->assertJsonFragment($payload->toArray());
    }

    /** @test */
    public function canReadTravel(): void
    {
        $payload = Travel::factory()->create();

        $this->assertNotNull(Travel::find($payload->id)); // in db

        $response = $this->get(route('secure.travels.show', $payload));

        $response->assertOk();
        $response->assertJsonFragment($payload->toArray());
    }

    /** @test */
    public function canUpdateTravel(): void
    {
        $payload = Travel::factory()->create();
        $replace = Travel::factory()->make();

        $this->assertNotNull(Travel::find($payload->id)); // in db
        $this->assertNull(Travel::find($replace->id)); // not in db

        $keys = ['name', 'description'];

        $modified_payload = $payload->fill($replace->only($keys));

        $response = $this->put(route('secure.travels.update', $payload), $modified_payload->toArray());

        $response->assertAccepted();
        $response->assertJsonFragment($modified_payload->only($keys));
    }

    /** @test */
    public function canDeleteTravel(): void
    {
        $payload = Travel::factory()->create();

        $this->assertNotNull(Travel::find($payload->id)); // in db

        $response = $this->delete(route('secure.travels.destroy', $payload));

        $response->assertNoContent();
    }

    /** @test */
    public function cantDeleteTravelWithTour(): void
    {
        $payload = Travel::factory()->create();

        Tour::factory(2)->create([
            'travel_id' => $payload->id,
        ]);

        $this->assertNotNull(Travel::find($payload->id)); // in db

        $response = $this->delete(route('secure.travels.destroy', $payload));

        $response->assertUnprocessable();
    }
}
