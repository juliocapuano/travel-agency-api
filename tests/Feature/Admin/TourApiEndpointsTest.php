<?php

namespace Tests\Feature\Admin;

use App\Models\Tour;
use App\Models\Travel;
use Carbon\Carbon;
use Database\Seeders\DatabaseSeeder;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class TourApiEndpointsTest extends TestCase
{
    use RefreshDatabase;

    private ?Travel $test_travel;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        (new DatabaseSeeder())->run();

        $token = \App\Models\User::first()->createToken(get_class($this))->plainTextToken;
        $this->withToken($token);

        $this->test_travel = Travel::factory()->create();
    }

    /** @test */
    public function canReadTourList(): void
    {
        Tour::factory(25)->create(['travel_id' => $this->test_travel->id]);

        $db_count = $this->test_travel->tours()->count();
        $response = $this->get(route('secure.travels.tours.index', $this->test_travel));

        $response->assertOk();
        $response->assertJsonCount($db_count);
        $response->assertJsonIsArray();
    }

    /** @test */
    public function canCreateTour(): void
    {
        $payload = Tour::factory()->make();

        $payload->starting_date = Carbon::create($payload->starting_date);
        $payload->ending_date   = Carbon::create($payload->ending_date);

        $this->assertNull(Tour::find($payload->id)); // not in db

        $response = $this->post(
            route('secure.travels.tours.store', $this->test_travel),
            (array)$payload->toArray()
        );

        $response->assertCreated();
        $response->assertJsonFragment($payload->toArray());
    }

    /** @test */
    public function canReadTour(): void
    {
        $payload = Tour::factory()->create(['travel_id' => $this->test_travel->id]);

        $this->assertNotNull(Tour::find($payload->id)); // in db

        $response = $this->get(route('secure.travels.tours.show', [$this->test_travel, $payload]));

        $response->assertOk();
        $response->assertJsonFragment($payload->only('name'));
    }

    /** @test */
    public function canUpdateTour(): void
    {
        $payload = Tour::factory()->create(['travel_id' => $this->test_travel->id]);
        $replace = Tour::factory()->make(['travel_id' => $this->test_travel->id]);

        $replace->starting_date = Carbon::create($replace->starting_date);
        $replace->ending_date   = Carbon::create($replace->ending_date);

        $this->assertNotNull(Tour::find($payload->id)); // in db
        $this->assertNull(Tour::find($replace->id)); // not in db

        $keys = ['name', 'starting_date', 'ending_date'];

        $modified_payload = $payload->fill($replace->only($keys));

        $response = $this->put(route('secure.travels.tours.update', [$this->test_travel, $payload]), $modified_payload->toArray());

        $response->assertAccepted();
        $response->assertJsonFragment($modified_payload->only($keys));
    }

    /** @test */
    public function canDeleteTour(): void
    {
        $payload = Tour::factory()->create(['travel_id' => $this->test_travel->id]);

        $this->assertNotNull(Tour::find($payload->id)); // in db

        $response = $this->delete(route('secure.travels.tours.destroy', [$this->test_travel, $payload]));

        $response->assertNoContent();
    }
}
